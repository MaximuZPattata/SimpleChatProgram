// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthProtocolMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AuthProtocolMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AuthProtocolMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AuthProtocolMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AuthProtocolMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthProtocolMessages_2eproto;
namespace accountAuthProtocol {
class AccountCreation;
struct AccountCreationDefaultTypeInternal;
extern AccountCreationDefaultTypeInternal _AccountCreation_default_instance_;
class AccountCreationFailure;
struct AccountCreationFailureDefaultTypeInternal;
extern AccountCreationFailureDefaultTypeInternal _AccountCreationFailure_default_instance_;
class AccountCreationSuccess;
struct AccountCreationSuccessDefaultTypeInternal;
extern AccountCreationSuccessDefaultTypeInternal _AccountCreationSuccess_default_instance_;
class AuthenticateAccount;
struct AuthenticateAccountDefaultTypeInternal;
extern AuthenticateAccountDefaultTypeInternal _AuthenticateAccount_default_instance_;
class AuthenticationFailure;
struct AuthenticationFailureDefaultTypeInternal;
extern AuthenticationFailureDefaultTypeInternal _AuthenticationFailure_default_instance_;
class AuthenticationSuccess;
struct AuthenticationSuccessDefaultTypeInternal;
extern AuthenticationSuccessDefaultTypeInternal _AuthenticationSuccess_default_instance_;
}  // namespace accountAuthProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::accountAuthProtocol::AccountCreation* Arena::CreateMaybeMessage<::accountAuthProtocol::AccountCreation>(Arena*);
template<> ::accountAuthProtocol::AccountCreationFailure* Arena::CreateMaybeMessage<::accountAuthProtocol::AccountCreationFailure>(Arena*);
template<> ::accountAuthProtocol::AccountCreationSuccess* Arena::CreateMaybeMessage<::accountAuthProtocol::AccountCreationSuccess>(Arena*);
template<> ::accountAuthProtocol::AuthenticateAccount* Arena::CreateMaybeMessage<::accountAuthProtocol::AuthenticateAccount>(Arena*);
template<> ::accountAuthProtocol::AuthenticationFailure* Arena::CreateMaybeMessage<::accountAuthProtocol::AuthenticationFailure>(Arena*);
template<> ::accountAuthProtocol::AuthenticationSuccess* Arena::CreateMaybeMessage<::accountAuthProtocol::AuthenticationSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace accountAuthProtocol {

enum AccountCreationFailure_FailReason : int {
  AccountCreationFailure_FailReason_ACCOUNT_ALREADY_EXISTS = 0,
  AccountCreationFailure_FailReason_INVALID_PASSWORD = 1,
  AccountCreationFailure_FailReason_INTERNAL_SERVER_ERROR = 2
};
bool AccountCreationFailure_FailReason_IsValid(int value);
constexpr AccountCreationFailure_FailReason AccountCreationFailure_FailReason_FailReason_MIN = AccountCreationFailure_FailReason_ACCOUNT_ALREADY_EXISTS;
constexpr AccountCreationFailure_FailReason AccountCreationFailure_FailReason_FailReason_MAX = AccountCreationFailure_FailReason_INTERNAL_SERVER_ERROR;
constexpr int AccountCreationFailure_FailReason_FailReason_ARRAYSIZE = AccountCreationFailure_FailReason_FailReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountCreationFailure_FailReason_descriptor();
template<typename T>
inline const std::string& AccountCreationFailure_FailReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountCreationFailure_FailReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountCreationFailure_FailReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountCreationFailure_FailReason_descriptor(), enum_t_value);
}
inline bool AccountCreationFailure_FailReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AccountCreationFailure_FailReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountCreationFailure_FailReason>(
    AccountCreationFailure_FailReason_descriptor(), name, value);
}
enum AuthenticationFailure_FailReason : int {
  AuthenticationFailure_FailReason_INVALID_CREDENTIALS = 0,
  AuthenticationFailure_FailReason_INTERNAL_SERVER_ERROR = 1
};
bool AuthenticationFailure_FailReason_IsValid(int value);
constexpr AuthenticationFailure_FailReason AuthenticationFailure_FailReason_FailReason_MIN = AuthenticationFailure_FailReason_INVALID_CREDENTIALS;
constexpr AuthenticationFailure_FailReason AuthenticationFailure_FailReason_FailReason_MAX = AuthenticationFailure_FailReason_INTERNAL_SERVER_ERROR;
constexpr int AuthenticationFailure_FailReason_FailReason_ARRAYSIZE = AuthenticationFailure_FailReason_FailReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticationFailure_FailReason_descriptor();
template<typename T>
inline const std::string& AuthenticationFailure_FailReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticationFailure_FailReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticationFailure_FailReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticationFailure_FailReason_descriptor(), enum_t_value);
}
inline bool AuthenticationFailure_FailReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticationFailure_FailReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticationFailure_FailReason>(
    AuthenticationFailure_FailReason_descriptor(), name, value);
}
// ===================================================================

class AccountCreation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accountAuthProtocol.AccountCreation) */ {
 public:
  inline AccountCreation() : AccountCreation(nullptr) {}
  ~AccountCreation() override;
  explicit constexpr AccountCreation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountCreation(const AccountCreation& from);
  AccountCreation(AccountCreation&& from) noexcept
    : AccountCreation() {
    *this = ::std::move(from);
  }

  inline AccountCreation& operator=(const AccountCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreation& operator=(AccountCreation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCreation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCreation* internal_default_instance() {
    return reinterpret_cast<const AccountCreation*>(
               &_AccountCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountCreation& a, AccountCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCreation* New() const final {
    return new AccountCreation();
  }

  AccountCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCreation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountCreation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountCreation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accountAuthProtocol.AccountCreation";
  }
  protected:
  explicit AccountCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:accountAuthProtocol.AccountCreation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  friend struct ::TableStruct_AuthProtocolMessages_2eproto;
};
// -------------------------------------------------------------------

class AccountCreationSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accountAuthProtocol.AccountCreationSuccess) */ {
 public:
  inline AccountCreationSuccess() : AccountCreationSuccess(nullptr) {}
  ~AccountCreationSuccess() override;
  explicit constexpr AccountCreationSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountCreationSuccess(const AccountCreationSuccess& from);
  AccountCreationSuccess(AccountCreationSuccess&& from) noexcept
    : AccountCreationSuccess() {
    *this = ::std::move(from);
  }

  inline AccountCreationSuccess& operator=(const AccountCreationSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreationSuccess& operator=(AccountCreationSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCreationSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCreationSuccess* internal_default_instance() {
    return reinterpret_cast<const AccountCreationSuccess*>(
               &_AccountCreationSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountCreationSuccess& a, AccountCreationSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreationSuccess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreationSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCreationSuccess* New() const final {
    return new AccountCreationSuccess();
  }

  AccountCreationSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCreationSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountCreationSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountCreationSuccess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreationSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accountAuthProtocol.AccountCreationSuccess";
  }
  protected:
  explicit AccountCreationSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:accountAuthProtocol.AccountCreationSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_AuthProtocolMessages_2eproto;
};
// -------------------------------------------------------------------

class AccountCreationFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accountAuthProtocol.AccountCreationFailure) */ {
 public:
  inline AccountCreationFailure() : AccountCreationFailure(nullptr) {}
  ~AccountCreationFailure() override;
  explicit constexpr AccountCreationFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountCreationFailure(const AccountCreationFailure& from);
  AccountCreationFailure(AccountCreationFailure&& from) noexcept
    : AccountCreationFailure() {
    *this = ::std::move(from);
  }

  inline AccountCreationFailure& operator=(const AccountCreationFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreationFailure& operator=(AccountCreationFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCreationFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCreationFailure* internal_default_instance() {
    return reinterpret_cast<const AccountCreationFailure*>(
               &_AccountCreationFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountCreationFailure& a, AccountCreationFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreationFailure* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreationFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCreationFailure* New() const final {
    return new AccountCreationFailure();
  }

  AccountCreationFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCreationFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountCreationFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountCreationFailure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreationFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accountAuthProtocol.AccountCreationFailure";
  }
  protected:
  explicit AccountCreationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AccountCreationFailure_FailReason FailReason;
  static constexpr FailReason ACCOUNT_ALREADY_EXISTS =
    AccountCreationFailure_FailReason_ACCOUNT_ALREADY_EXISTS;
  static constexpr FailReason INVALID_PASSWORD =
    AccountCreationFailure_FailReason_INVALID_PASSWORD;
  static constexpr FailReason INTERNAL_SERVER_ERROR =
    AccountCreationFailure_FailReason_INTERNAL_SERVER_ERROR;
  static inline bool FailReason_IsValid(int value) {
    return AccountCreationFailure_FailReason_IsValid(value);
  }
  static constexpr FailReason FailReason_MIN =
    AccountCreationFailure_FailReason_FailReason_MIN;
  static constexpr FailReason FailReason_MAX =
    AccountCreationFailure_FailReason_FailReason_MAX;
  static constexpr int FailReason_ARRAYSIZE =
    AccountCreationFailure_FailReason_FailReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailReason_descriptor() {
    return AccountCreationFailure_FailReason_descriptor();
  }
  template<typename T>
  static inline const std::string& FailReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailReason_Name.");
    return AccountCreationFailure_FailReason_Name(enum_t_value);
  }
  static inline bool FailReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FailReason* value) {
    return AccountCreationFailure_FailReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .accountAuthProtocol.AccountCreationFailure.FailReason reason = 2 [default = INVALID_PASSWORD];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::accountAuthProtocol::AccountCreationFailure_FailReason reason() const;
  void set_reason(::accountAuthProtocol::AccountCreationFailure_FailReason value);
  private:
  ::accountAuthProtocol::AccountCreationFailure_FailReason _internal_reason() const;
  void _internal_set_reason(::accountAuthProtocol::AccountCreationFailure_FailReason value);
  public:

  // @@protoc_insertion_point(class_scope:accountAuthProtocol.AccountCreationFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int reason_;
  friend struct ::TableStruct_AuthProtocolMessages_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accountAuthProtocol.AuthenticateAccount) */ {
 public:
  inline AuthenticateAccount() : AuthenticateAccount(nullptr) {}
  ~AuthenticateAccount() override;
  explicit constexpr AuthenticateAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateAccount(const AuthenticateAccount& from);
  AuthenticateAccount(AuthenticateAccount&& from) noexcept
    : AuthenticateAccount() {
    *this = ::std::move(from);
  }

  inline AuthenticateAccount& operator=(const AuthenticateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateAccount& operator=(AuthenticateAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateAccount* internal_default_instance() {
    return reinterpret_cast<const AuthenticateAccount*>(
               &_AuthenticateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateAccount& a, AuthenticateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateAccount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateAccount* New() const final {
    return new AuthenticateAccount();
  }

  AuthenticateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accountAuthProtocol.AuthenticateAccount";
  }
  protected:
  explicit AuthenticateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:accountAuthProtocol.AuthenticateAccount)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  friend struct ::TableStruct_AuthProtocolMessages_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accountAuthProtocol.AuthenticationSuccess) */ {
 public:
  inline AuthenticationSuccess() : AuthenticationSuccess(nullptr) {}
  ~AuthenticationSuccess() override;
  explicit constexpr AuthenticationSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationSuccess(const AuthenticationSuccess& from);
  AuthenticationSuccess(AuthenticationSuccess&& from) noexcept
    : AuthenticationSuccess() {
    *this = ::std::move(from);
  }

  inline AuthenticationSuccess& operator=(const AuthenticationSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationSuccess& operator=(AuthenticationSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticationSuccess*>(
               &_AuthenticationSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthenticationSuccess& a, AuthenticationSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationSuccess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationSuccess* New() const final {
    return new AuthenticationSuccess();
  }

  AuthenticationSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticationSuccess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accountAuthProtocol.AuthenticationSuccess";
  }
  protected:
  explicit AuthenticationSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional string creationDate = 3;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:accountAuthProtocol.AuthenticationSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_AuthProtocolMessages_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:accountAuthProtocol.AuthenticationFailure) */ {
 public:
  inline AuthenticationFailure() : AuthenticationFailure(nullptr) {}
  ~AuthenticationFailure() override;
  explicit constexpr AuthenticationFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationFailure(const AuthenticationFailure& from);
  AuthenticationFailure(AuthenticationFailure&& from) noexcept
    : AuthenticationFailure() {
    *this = ::std::move(from);
  }

  inline AuthenticationFailure& operator=(const AuthenticationFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationFailure& operator=(AuthenticationFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationFailure* internal_default_instance() {
    return reinterpret_cast<const AuthenticationFailure*>(
               &_AuthenticationFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticationFailure& a, AuthenticationFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationFailure* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationFailure* New() const final {
    return new AuthenticationFailure();
  }

  AuthenticationFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticationFailure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "accountAuthProtocol.AuthenticationFailure";
  }
  protected:
  explicit AuthenticationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthenticationFailure_FailReason FailReason;
  static constexpr FailReason INVALID_CREDENTIALS =
    AuthenticationFailure_FailReason_INVALID_CREDENTIALS;
  static constexpr FailReason INTERNAL_SERVER_ERROR =
    AuthenticationFailure_FailReason_INTERNAL_SERVER_ERROR;
  static inline bool FailReason_IsValid(int value) {
    return AuthenticationFailure_FailReason_IsValid(value);
  }
  static constexpr FailReason FailReason_MIN =
    AuthenticationFailure_FailReason_FailReason_MIN;
  static constexpr FailReason FailReason_MAX =
    AuthenticationFailure_FailReason_FailReason_MAX;
  static constexpr int FailReason_ARRAYSIZE =
    AuthenticationFailure_FailReason_FailReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailReason_descriptor() {
    return AuthenticationFailure_FailReason_descriptor();
  }
  template<typename T>
  static inline const std::string& FailReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailReason_Name.");
    return AuthenticationFailure_FailReason_Name(enum_t_value);
  }
  static inline bool FailReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FailReason* value) {
    return AuthenticationFailure_FailReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .accountAuthProtocol.AuthenticationFailure.FailReason reason = 2 [default = INVALID_CREDENTIALS];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::accountAuthProtocol::AuthenticationFailure_FailReason reason() const;
  void set_reason(::accountAuthProtocol::AuthenticationFailure_FailReason value);
  private:
  ::accountAuthProtocol::AuthenticationFailure_FailReason _internal_reason() const;
  void _internal_set_reason(::accountAuthProtocol::AuthenticationFailure_FailReason value);
  public:

  // @@protoc_insertion_point(class_scope:accountAuthProtocol.AuthenticationFailure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  int reason_;
  friend struct ::TableStruct_AuthProtocolMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountCreation

// required int64 requestId = 1;
inline bool AccountCreation::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountCreation::has_requestid() const {
  return _internal_has_requestid();
}
inline void AccountCreation::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreation::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreation::requestid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AccountCreation.requestId)
  return _internal_requestid();
}
inline void AccountCreation::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void AccountCreation::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AccountCreation.requestId)
}

// required string email = 2;
inline bool AccountCreation::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountCreation::has_email() const {
  return _internal_has_email();
}
inline void AccountCreation::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountCreation::email() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AccountCreation.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreation::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AccountCreation.email)
}
inline std::string* AccountCreation::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accountAuthProtocol.AccountCreation.email)
  return _s;
}
inline const std::string& AccountCreation::_internal_email() const {
  return email_.Get();
}
inline void AccountCreation::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountCreation::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountCreation::release_email() {
  // @@protoc_insertion_point(field_release:accountAuthProtocol.AccountCreation.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountCreation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accountAuthProtocol.AccountCreation.email)
}

// required string plaintextPassword = 3;
inline bool AccountCreation::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountCreation::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void AccountCreation::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountCreation::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AccountCreation.plaintextPassword)
  return _internal_plaintextpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreation::set_plaintextpassword(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AccountCreation.plaintextPassword)
}
inline std::string* AccountCreation::mutable_plaintextpassword() {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:accountAuthProtocol.AccountCreation.plaintextPassword)
  return _s;
}
inline const std::string& AccountCreation::_internal_plaintextpassword() const {
  return plaintextpassword_.Get();
}
inline void AccountCreation::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountCreation::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountCreation::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:accountAuthProtocol.AccountCreation.plaintextPassword)
  if (!_internal_has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountCreation::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accountAuthProtocol.AccountCreation.plaintextPassword)
}

// -------------------------------------------------------------------

// AccountCreationSuccess

// required int64 requestId = 1;
inline bool AccountCreationSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountCreationSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void AccountCreationSuccess::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreationSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreationSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AccountCreationSuccess.requestId)
  return _internal_requestid();
}
inline void AccountCreationSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void AccountCreationSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AccountCreationSuccess.requestId)
}

// optional int64 userId = 2;
inline bool AccountCreationSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountCreationSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void AccountCreationSuccess::clear_userid() {
  userid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreationSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreationSuccess::userid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AccountCreationSuccess.userId)
  return _internal_userid();
}
inline void AccountCreationSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void AccountCreationSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AccountCreationSuccess.userId)
}

// -------------------------------------------------------------------

// AccountCreationFailure

// required int64 requestId = 1;
inline bool AccountCreationFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountCreationFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void AccountCreationFailure::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreationFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreationFailure::requestid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AccountCreationFailure.requestId)
  return _internal_requestid();
}
inline void AccountCreationFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void AccountCreationFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AccountCreationFailure.requestId)
}

// optional .accountAuthProtocol.AccountCreationFailure.FailReason reason = 2 [default = INVALID_PASSWORD];
inline bool AccountCreationFailure::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountCreationFailure::has_reason() const {
  return _internal_has_reason();
}
inline void AccountCreationFailure::clear_reason() {
  reason_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::accountAuthProtocol::AccountCreationFailure_FailReason AccountCreationFailure::_internal_reason() const {
  return static_cast< ::accountAuthProtocol::AccountCreationFailure_FailReason >(reason_);
}
inline ::accountAuthProtocol::AccountCreationFailure_FailReason AccountCreationFailure::reason() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AccountCreationFailure.reason)
  return _internal_reason();
}
inline void AccountCreationFailure::_internal_set_reason(::accountAuthProtocol::AccountCreationFailure_FailReason value) {
  assert(::accountAuthProtocol::AccountCreationFailure_FailReason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void AccountCreationFailure::set_reason(::accountAuthProtocol::AccountCreationFailure_FailReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AccountCreationFailure.reason)
}

// -------------------------------------------------------------------

// AuthenticateAccount

// required int64 requestId = 1;
inline bool AuthenticateAccount::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateAccount::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateAccount::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateAccount::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateAccount::requestid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticateAccount.requestId)
  return _internal_requestid();
}
inline void AuthenticateAccount::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void AuthenticateAccount::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticateAccount.requestId)
}

// required string email = 2;
inline bool AuthenticateAccount::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateAccount::has_email() const {
  return _internal_has_email();
}
inline void AuthenticateAccount::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateAccount::email() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticateAccount.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateAccount::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticateAccount.email)
}
inline std::string* AuthenticateAccount::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:accountAuthProtocol.AuthenticateAccount.email)
  return _s;
}
inline const std::string& AuthenticateAccount::_internal_email() const {
  return email_.Get();
}
inline void AuthenticateAccount::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateAccount::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateAccount::release_email() {
  // @@protoc_insertion_point(field_release:accountAuthProtocol.AuthenticateAccount.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateAccount::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accountAuthProtocol.AuthenticateAccount.email)
}

// required string plaintextPassword = 3;
inline bool AuthenticateAccount::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateAccount::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void AuthenticateAccount::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateAccount::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticateAccount.plaintextPassword)
  return _internal_plaintextpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateAccount::set_plaintextpassword(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticateAccount.plaintextPassword)
}
inline std::string* AuthenticateAccount::mutable_plaintextpassword() {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:accountAuthProtocol.AuthenticateAccount.plaintextPassword)
  return _s;
}
inline const std::string& AuthenticateAccount::_internal_plaintextpassword() const {
  return plaintextpassword_.Get();
}
inline void AuthenticateAccount::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateAccount::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateAccount::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:accountAuthProtocol.AuthenticateAccount.plaintextPassword)
  if (!_internal_has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateAccount::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accountAuthProtocol.AuthenticateAccount.plaintextPassword)
}

// -------------------------------------------------------------------

// AuthenticationSuccess

// required int64 requestId = 1;
inline bool AuthenticationSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticationSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticationSuccess::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticationSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticationSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticationSuccess.requestId)
  return _internal_requestid();
}
inline void AuthenticationSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
}
inline void AuthenticationSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticationSuccess.requestId)
}

// optional int64 userId = 2;
inline bool AuthenticationSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticationSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void AuthenticationSuccess::clear_userid() {
  userid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticationSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticationSuccess::userid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticationSuccess.userId)
  return _internal_userid();
}
inline void AuthenticationSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void AuthenticationSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticationSuccess.userId)
}

// optional string creationDate = 3;
inline bool AuthenticationSuccess::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticationSuccess::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void AuthenticationSuccess::clear_creationdate() {
  creationdate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticationSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticationSuccess.creationDate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationSuccess::set_creationdate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticationSuccess.creationDate)
}
inline std::string* AuthenticationSuccess::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:accountAuthProtocol.AuthenticationSuccess.creationDate)
  return _s;
}
inline const std::string& AuthenticationSuccess::_internal_creationdate() const {
  return creationdate_.Get();
}
inline void AuthenticationSuccess::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationSuccess::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000001u;
  return creationdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:accountAuthProtocol.AuthenticationSuccess.creationDate)
  if (!_internal_has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creationdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationSuccess::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:accountAuthProtocol.AuthenticationSuccess.creationDate)
}

// -------------------------------------------------------------------

// AuthenticationFailure

// required int64 requestId = 1;
inline bool AuthenticationFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticationFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticationFailure::clear_requestid() {
  requestid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticationFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticationFailure::requestid() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticationFailure.requestId)
  return _internal_requestid();
}
inline void AuthenticationFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void AuthenticationFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticationFailure.requestId)
}

// required .accountAuthProtocol.AuthenticationFailure.FailReason reason = 2 [default = INVALID_CREDENTIALS];
inline bool AuthenticationFailure::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticationFailure::has_reason() const {
  return _internal_has_reason();
}
inline void AuthenticationFailure::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::accountAuthProtocol::AuthenticationFailure_FailReason AuthenticationFailure::_internal_reason() const {
  return static_cast< ::accountAuthProtocol::AuthenticationFailure_FailReason >(reason_);
}
inline ::accountAuthProtocol::AuthenticationFailure_FailReason AuthenticationFailure::reason() const {
  // @@protoc_insertion_point(field_get:accountAuthProtocol.AuthenticationFailure.reason)
  return _internal_reason();
}
inline void AuthenticationFailure::_internal_set_reason(::accountAuthProtocol::AuthenticationFailure_FailReason value) {
  assert(::accountAuthProtocol::AuthenticationFailure_FailReason_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void AuthenticationFailure::set_reason(::accountAuthProtocol::AuthenticationFailure_FailReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:accountAuthProtocol.AuthenticationFailure.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace accountAuthProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::accountAuthProtocol::AccountCreationFailure_FailReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accountAuthProtocol::AccountCreationFailure_FailReason>() {
  return ::accountAuthProtocol::AccountCreationFailure_FailReason_descriptor();
}
template <> struct is_proto_enum< ::accountAuthProtocol::AuthenticationFailure_FailReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::accountAuthProtocol::AuthenticationFailure_FailReason>() {
  return ::accountAuthProtocol::AuthenticationFailure_FailReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AuthProtocolMessages_2eproto
