// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthProtocolMessages.proto

#include "AuthProtocolMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace accountAuthProtocol {
constexpr AccountCreation::AccountCreation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plaintextpassword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requestid_(int64_t{0}){}
struct AccountCreationDefaultTypeInternal {
  constexpr AccountCreationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountCreationDefaultTypeInternal() {}
  union {
    AccountCreation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountCreationDefaultTypeInternal _AccountCreation_default_instance_;
constexpr AccountCreationSuccess::AccountCreationSuccess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(int64_t{0})
  , userid_(int64_t{0}){}
struct AccountCreationSuccessDefaultTypeInternal {
  constexpr AccountCreationSuccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountCreationSuccessDefaultTypeInternal() {}
  union {
    AccountCreationSuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountCreationSuccessDefaultTypeInternal _AccountCreationSuccess_default_instance_;
constexpr AccountCreationFailure::AccountCreationFailure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(int64_t{0})
  , reason_(1)
{}
struct AccountCreationFailureDefaultTypeInternal {
  constexpr AccountCreationFailureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountCreationFailureDefaultTypeInternal() {}
  union {
    AccountCreationFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountCreationFailureDefaultTypeInternal _AccountCreationFailure_default_instance_;
constexpr AuthenticateAccount::AuthenticateAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plaintextpassword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requestid_(int64_t{0}){}
struct AuthenticateAccountDefaultTypeInternal {
  constexpr AuthenticateAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticateAccountDefaultTypeInternal() {}
  union {
    AuthenticateAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticateAccountDefaultTypeInternal _AuthenticateAccount_default_instance_;
constexpr AuthenticationSuccess::AuthenticationSuccess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : creationdate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requestid_(int64_t{0})
  , userid_(int64_t{0}){}
struct AuthenticationSuccessDefaultTypeInternal {
  constexpr AuthenticationSuccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticationSuccessDefaultTypeInternal() {}
  union {
    AuthenticationSuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticationSuccessDefaultTypeInternal _AuthenticationSuccess_default_instance_;
constexpr AuthenticationFailure::AuthenticationFailure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requestid_(int64_t{0})
  , reason_(0)
{}
struct AuthenticationFailureDefaultTypeInternal {
  constexpr AuthenticationFailureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthenticationFailureDefaultTypeInternal() {}
  union {
    AuthenticationFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthenticationFailureDefaultTypeInternal _AuthenticationFailure_default_instance_;
}  // namespace accountAuthProtocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AuthProtocolMessages_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_AuthProtocolMessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AuthProtocolMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AuthProtocolMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreation, requestid_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreation, email_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreation, plaintextpassword_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationSuccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationSuccess, requestid_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationSuccess, userid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationFailure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationFailure, requestid_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AccountCreationFailure, reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticateAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticateAccount, requestid_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticateAccount, email_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticateAccount, plaintextpassword_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationSuccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationSuccess, requestid_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationSuccess, userid_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationSuccess, creationdate_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationFailure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationFailure, requestid_),
  PROTOBUF_FIELD_OFFSET(::accountAuthProtocol::AuthenticationFailure, reason_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::accountAuthProtocol::AccountCreation)},
  { 12, 20, -1, sizeof(::accountAuthProtocol::AccountCreationSuccess)},
  { 22, 30, -1, sizeof(::accountAuthProtocol::AccountCreationFailure)},
  { 32, 41, -1, sizeof(::accountAuthProtocol::AuthenticateAccount)},
  { 44, 53, -1, sizeof(::accountAuthProtocol::AuthenticationSuccess)},
  { 56, 64, -1, sizeof(::accountAuthProtocol::AuthenticationFailure)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accountAuthProtocol::_AccountCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accountAuthProtocol::_AccountCreationSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accountAuthProtocol::_AccountCreationFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accountAuthProtocol::_AuthenticateAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accountAuthProtocol::_AuthenticationSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::accountAuthProtocol::_AuthenticationFailure_default_instance_),
};

const char descriptor_table_protodef_AuthProtocolMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032AuthProtocolMessages.proto\022\023accountAut"
  "hProtocol\"N\n\017AccountCreation\022\021\n\trequestI"
  "d\030\001 \002(\003\022\r\n\005email\030\002 \002(\t\022\031\n\021plaintextPassw"
  "ord\030\003 \002(\t\";\n\026AccountCreationSuccess\022\021\n\tr"
  "equestId\030\001 \002(\003\022\016\n\006userId\030\002 \001(\003\"\340\001\n\026Accou"
  "ntCreationFailure\022\021\n\trequestId\030\001 \002(\003\022X\n\006"
  "reason\030\002 \001(\01626.accountAuthProtocol.Accou"
  "ntCreationFailure.FailReason:\020INVALID_PA"
  "SSWORD\"Y\n\nFailReason\022\032\n\026ACCOUNT_ALREADY_"
  "EXISTS\020\000\022\024\n\020INVALID_PASSWORD\020\001\022\031\n\025INTERN"
  "AL_SERVER_ERROR\020\002\"R\n\023AuthenticateAccount"
  "\022\021\n\trequestId\030\001 \002(\003\022\r\n\005email\030\002 \002(\t\022\031\n\021pl"
  "aintextPassword\030\003 \002(\t\"P\n\025AuthenticationS"
  "uccess\022\021\n\trequestId\030\001 \002(\003\022\016\n\006userId\030\002 \001("
  "\003\022\024\n\014creationDate\030\003 \001(\t\"\310\001\n\025Authenticati"
  "onFailure\022\021\n\trequestId\030\001 \002(\003\022Z\n\006reason\030\002"
  " \002(\01625.accountAuthProtocol.Authenticatio"
  "nFailure.FailReason:\023INVALID_CREDENTIALS"
  "\"@\n\nFailReason\022\027\n\023INVALID_CREDENTIALS\020\000\022"
  "\031\n\025INTERNAL_SERVER_ERROR\020\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AuthProtocolMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthProtocolMessages_2eproto = {
  false, false, 786, descriptor_table_protodef_AuthProtocolMessages_2eproto, "AuthProtocolMessages.proto", 
  &descriptor_table_AuthProtocolMessages_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_AuthProtocolMessages_2eproto::offsets,
  file_level_metadata_AuthProtocolMessages_2eproto, file_level_enum_descriptors_AuthProtocolMessages_2eproto, file_level_service_descriptors_AuthProtocolMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_AuthProtocolMessages_2eproto_getter() {
  return &descriptor_table_AuthProtocolMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AuthProtocolMessages_2eproto(&descriptor_table_AuthProtocolMessages_2eproto);
namespace accountAuthProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountCreationFailure_FailReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AuthProtocolMessages_2eproto);
  return file_level_enum_descriptors_AuthProtocolMessages_2eproto[0];
}
bool AccountCreationFailure_FailReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AccountCreationFailure_FailReason AccountCreationFailure::ACCOUNT_ALREADY_EXISTS;
constexpr AccountCreationFailure_FailReason AccountCreationFailure::INVALID_PASSWORD;
constexpr AccountCreationFailure_FailReason AccountCreationFailure::INTERNAL_SERVER_ERROR;
constexpr AccountCreationFailure_FailReason AccountCreationFailure::FailReason_MIN;
constexpr AccountCreationFailure_FailReason AccountCreationFailure::FailReason_MAX;
constexpr int AccountCreationFailure::FailReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticationFailure_FailReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AuthProtocolMessages_2eproto);
  return file_level_enum_descriptors_AuthProtocolMessages_2eproto[1];
}
bool AuthenticationFailure_FailReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AuthenticationFailure_FailReason AuthenticationFailure::INVALID_CREDENTIALS;
constexpr AuthenticationFailure_FailReason AuthenticationFailure::INTERNAL_SERVER_ERROR;
constexpr AuthenticationFailure_FailReason AuthenticationFailure::FailReason_MIN;
constexpr AuthenticationFailure_FailReason AuthenticationFailure::FailReason_MAX;
constexpr int AuthenticationFailure::FailReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AccountCreation::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountCreation>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plaintextpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AccountCreation::AccountCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accountAuthProtocol.AccountCreation)
}
AccountCreation::AccountCreation(const AccountCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_plaintextpassword()) {
    plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plaintextpassword(), 
      GetArenaForAllocation());
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:accountAuthProtocol.AccountCreation)
}

void AccountCreation::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
requestid_ = int64_t{0};
}

AccountCreation::~AccountCreation() {
  // @@protoc_insertion_point(destructor:accountAuthProtocol.AccountCreation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plaintextpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountCreation::ArenaDtor(void* object) {
  AccountCreation* _this = reinterpret_cast< AccountCreation* >(object);
  (void)_this;
}
void AccountCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:accountAuthProtocol.AccountCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      plaintextpassword_.ClearNonDefaultToEmpty();
    }
  }
  requestid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accountAuthProtocol.AccountCreation.email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string plaintextPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_plaintextpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accountAuthProtocol.AccountCreation.plaintextPassword");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountCreation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accountAuthProtocol.AccountCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "accountAuthProtocol.AccountCreation.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string plaintextPassword = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_plaintextpassword().data(), static_cast<int>(this->_internal_plaintextpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "accountAuthProtocol.AccountCreation.plaintextPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_plaintextpassword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accountAuthProtocol.AccountCreation)
  return target;
}

size_t AccountCreation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:accountAuthProtocol.AccountCreation)
  size_t total_size = 0;

  if (_internal_has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (_internal_has_plaintextpassword()) {
    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());
  }

  if (_internal_has_requestid()) {
    // required int64 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }

  return total_size;
}
size_t AccountCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accountAuthProtocol.AccountCreation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());

    // required int64 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountCreation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountCreation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountCreation::GetClassData() const { return &_class_data_; }

void AccountCreation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountCreation *>(to)->MergeFrom(
      static_cast<const AccountCreation &>(from));
}


void AccountCreation::MergeFrom(const AccountCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accountAuthProtocol.AccountCreation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_plaintextpassword(from._internal_plaintextpassword());
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountCreation::CopyFrom(const AccountCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accountAuthProtocol.AccountCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCreation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AccountCreation::InternalSwap(AccountCreation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plaintextpassword_, lhs_arena,
      &other->plaintextpassword_, rhs_arena
  );
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCreation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AuthProtocolMessages_2eproto_getter, &descriptor_table_AuthProtocolMessages_2eproto_once,
      file_level_metadata_AuthProtocolMessages_2eproto[0]);
}

// ===================================================================

class AccountCreationSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountCreationSuccess>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AccountCreationSuccess::AccountCreationSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accountAuthProtocol.AccountCreationSuccess)
}
AccountCreationSuccess::AccountCreationSuccess(const AccountCreationSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:accountAuthProtocol.AccountCreationSuccess)
}

void AccountCreationSuccess::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
}

AccountCreationSuccess::~AccountCreationSuccess() {
  // @@protoc_insertion_point(destructor:accountAuthProtocol.AccountCreationSuccess)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountCreationSuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountCreationSuccess::ArenaDtor(void* object) {
  AccountCreationSuccess* _this = reinterpret_cast< AccountCreationSuccess* >(object);
  (void)_this;
}
void AccountCreationSuccess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountCreationSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountCreationSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:accountAuthProtocol.AccountCreationSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountCreationSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountCreationSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accountAuthProtocol.AccountCreationSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // optional int64 userId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accountAuthProtocol.AccountCreationSuccess)
  return target;
}

size_t AccountCreationSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accountAuthProtocol.AccountCreationSuccess)
  size_t total_size = 0;

  // required int64 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 userId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountCreationSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountCreationSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountCreationSuccess::GetClassData() const { return &_class_data_; }

void AccountCreationSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountCreationSuccess *>(to)->MergeFrom(
      static_cast<const AccountCreationSuccess &>(from));
}


void AccountCreationSuccess::MergeFrom(const AccountCreationSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accountAuthProtocol.AccountCreationSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountCreationSuccess::CopyFrom(const AccountCreationSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accountAuthProtocol.AccountCreationSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCreationSuccess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AccountCreationSuccess::InternalSwap(AccountCreationSuccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountCreationSuccess, userid_)
      + sizeof(AccountCreationSuccess::userid_)
      - PROTOBUF_FIELD_OFFSET(AccountCreationSuccess, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCreationSuccess::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AuthProtocolMessages_2eproto_getter, &descriptor_table_AuthProtocolMessages_2eproto_once,
      file_level_metadata_AuthProtocolMessages_2eproto[1]);
}

// ===================================================================

class AccountCreationFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountCreationFailure>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AccountCreationFailure::AccountCreationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accountAuthProtocol.AccountCreationFailure)
}
AccountCreationFailure::AccountCreationFailure(const AccountCreationFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:accountAuthProtocol.AccountCreationFailure)
}

void AccountCreationFailure::SharedCtor() {
requestid_ = int64_t{0};
reason_ = 1;
}

AccountCreationFailure::~AccountCreationFailure() {
  // @@protoc_insertion_point(destructor:accountAuthProtocol.AccountCreationFailure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccountCreationFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountCreationFailure::ArenaDtor(void* object) {
  AccountCreationFailure* _this = reinterpret_cast< AccountCreationFailure* >(object);
  (void)_this;
}
void AccountCreationFailure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountCreationFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountCreationFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:accountAuthProtocol.AccountCreationFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    requestid_ = int64_t{0};
    reason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountCreationFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .accountAuthProtocol.AccountCreationFailure.FailReason reason = 2 [default = INVALID_PASSWORD];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::accountAuthProtocol::AccountCreationFailure_FailReason_IsValid(val))) {
            _internal_set_reason(static_cast<::accountAuthProtocol::AccountCreationFailure_FailReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountCreationFailure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accountAuthProtocol.AccountCreationFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // optional .accountAuthProtocol.AccountCreationFailure.FailReason reason = 2 [default = INVALID_PASSWORD];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accountAuthProtocol.AccountCreationFailure)
  return target;
}

size_t AccountCreationFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accountAuthProtocol.AccountCreationFailure)
  size_t total_size = 0;

  // required int64 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .accountAuthProtocol.AccountCreationFailure.FailReason reason = 2 [default = INVALID_PASSWORD];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountCreationFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccountCreationFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountCreationFailure::GetClassData() const { return &_class_data_; }

void AccountCreationFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccountCreationFailure *>(to)->MergeFrom(
      static_cast<const AccountCreationFailure &>(from));
}


void AccountCreationFailure::MergeFrom(const AccountCreationFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accountAuthProtocol.AccountCreationFailure)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountCreationFailure::CopyFrom(const AccountCreationFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accountAuthProtocol.AccountCreationFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCreationFailure::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AccountCreationFailure::InternalSwap(AccountCreationFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCreationFailure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AuthProtocolMessages_2eproto_getter, &descriptor_table_AuthProtocolMessages_2eproto_once,
      file_level_metadata_AuthProtocolMessages_2eproto[2]);
}

// ===================================================================

class AuthenticateAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticateAccount>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plaintextpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AuthenticateAccount::AuthenticateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accountAuthProtocol.AuthenticateAccount)
}
AuthenticateAccount::AuthenticateAccount(const AuthenticateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_plaintextpassword()) {
    plaintextpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plaintextpassword(), 
      GetArenaForAllocation());
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:accountAuthProtocol.AuthenticateAccount)
}

void AuthenticateAccount::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
requestid_ = int64_t{0};
}

AuthenticateAccount::~AuthenticateAccount() {
  // @@protoc_insertion_point(destructor:accountAuthProtocol.AuthenticateAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plaintextpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateAccount::ArenaDtor(void* object) {
  AuthenticateAccount* _this = reinterpret_cast< AuthenticateAccount* >(object);
  (void)_this;
}
void AuthenticateAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:accountAuthProtocol.AuthenticateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      plaintextpassword_.ClearNonDefaultToEmpty();
    }
  }
  requestid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accountAuthProtocol.AuthenticateAccount.email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string plaintextPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_plaintextpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accountAuthProtocol.AuthenticateAccount.plaintextPassword");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accountAuthProtocol.AuthenticateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "accountAuthProtocol.AuthenticateAccount.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string plaintextPassword = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_plaintextpassword().data(), static_cast<int>(this->_internal_plaintextpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "accountAuthProtocol.AuthenticateAccount.plaintextPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_plaintextpassword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accountAuthProtocol.AuthenticateAccount)
  return target;
}

size_t AuthenticateAccount::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:accountAuthProtocol.AuthenticateAccount)
  size_t total_size = 0;

  if (_internal_has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (_internal_has_plaintextpassword()) {
    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());
  }

  if (_internal_has_requestid()) {
    // required int64 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }

  return total_size;
}
size_t AuthenticateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accountAuthProtocol.AuthenticateAccount)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());

    // required int64 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticateAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateAccount::GetClassData() const { return &_class_data_; }

void AuthenticateAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticateAccount *>(to)->MergeFrom(
      static_cast<const AuthenticateAccount &>(from));
}


void AuthenticateAccount::MergeFrom(const AuthenticateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accountAuthProtocol.AuthenticateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_plaintextpassword(from._internal_plaintextpassword());
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateAccount::CopyFrom(const AuthenticateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accountAuthProtocol.AuthenticateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateAccount::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthenticateAccount::InternalSwap(AuthenticateAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plaintextpassword_, lhs_arena,
      &other->plaintextpassword_, rhs_arena
  );
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AuthProtocolMessages_2eproto_getter, &descriptor_table_AuthProtocolMessages_2eproto_once,
      file_level_metadata_AuthProtocolMessages_2eproto[3]);
}

// ===================================================================

class AuthenticationSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticationSuccess>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creationdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

AuthenticationSuccess::AuthenticationSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accountAuthProtocol.AuthenticationSuccess)
}
AuthenticationSuccess::AuthenticationSuccess(const AuthenticationSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  creationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creationdate()) {
    creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creationdate(), 
      GetArenaForAllocation());
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:accountAuthProtocol.AuthenticationSuccess)
}

void AuthenticationSuccess::SharedCtor() {
creationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
}

AuthenticationSuccess::~AuthenticationSuccess() {
  // @@protoc_insertion_point(destructor:accountAuthProtocol.AuthenticationSuccess)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticationSuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  creationdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticationSuccess::ArenaDtor(void* object) {
  AuthenticationSuccess* _this = reinterpret_cast< AuthenticationSuccess* >(object);
  (void)_this;
}
void AuthenticationSuccess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticationSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticationSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:accountAuthProtocol.AuthenticationSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    creationdate_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string creationDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_creationdate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "accountAuthProtocol.AuthenticationSuccess.creationDate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticationSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accountAuthProtocol.AuthenticationSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // optional int64 userId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_userid(), target);
  }

  // optional string creationDate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creationdate().data(), static_cast<int>(this->_internal_creationdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "accountAuthProtocol.AuthenticationSuccess.creationDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_creationdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accountAuthProtocol.AuthenticationSuccess)
  return target;
}

size_t AuthenticationSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accountAuthProtocol.AuthenticationSuccess)
  size_t total_size = 0;

  // required int64 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string creationDate = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationdate());
  }

  // optional int64 userId = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticationSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationSuccess::GetClassData() const { return &_class_data_; }

void AuthenticationSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticationSuccess *>(to)->MergeFrom(
      static_cast<const AuthenticationSuccess &>(from));
}


void AuthenticationSuccess::MergeFrom(const AuthenticationSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accountAuthProtocol.AuthenticationSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_creationdate(from._internal_creationdate());
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationSuccess::CopyFrom(const AuthenticationSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accountAuthProtocol.AuthenticationSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationSuccess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthenticationSuccess::InternalSwap(AuthenticationSuccess* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creationdate_, lhs_arena,
      &other->creationdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticationSuccess, userid_)
      + sizeof(AuthenticationSuccess::userid_)
      - PROTOBUF_FIELD_OFFSET(AuthenticationSuccess, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationSuccess::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AuthProtocolMessages_2eproto_getter, &descriptor_table_AuthProtocolMessages_2eproto_once,
      file_level_metadata_AuthProtocolMessages_2eproto[4]);
}

// ===================================================================

class AuthenticationFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticationFailure>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AuthenticationFailure::AuthenticationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:accountAuthProtocol.AuthenticationFailure)
}
AuthenticationFailure::AuthenticationFailure(const AuthenticationFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:accountAuthProtocol.AuthenticationFailure)
}

void AuthenticationFailure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
}

AuthenticationFailure::~AuthenticationFailure() {
  // @@protoc_insertion_point(destructor:accountAuthProtocol.AuthenticationFailure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthenticationFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuthenticationFailure::ArenaDtor(void* object) {
  AuthenticationFailure* _this = reinterpret_cast< AuthenticationFailure* >(object);
  (void)_this;
}
void AuthenticationFailure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticationFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthenticationFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:accountAuthProtocol.AuthenticationFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .accountAuthProtocol.AuthenticationFailure.FailReason reason = 2 [default = INVALID_CREDENTIALS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::accountAuthProtocol::AuthenticationFailure_FailReason_IsValid(val))) {
            _internal_set_reason(static_cast<::accountAuthProtocol::AuthenticationFailure_FailReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticationFailure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:accountAuthProtocol.AuthenticationFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required .accountAuthProtocol.AuthenticationFailure.FailReason reason = 2 [default = INVALID_CREDENTIALS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:accountAuthProtocol.AuthenticationFailure)
  return target;
}

size_t AuthenticationFailure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:accountAuthProtocol.AuthenticationFailure)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required int64 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_reason()) {
    // required .accountAuthProtocol.AuthenticationFailure.FailReason reason = 2 [default = INVALID_CREDENTIALS];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return total_size;
}
size_t AuthenticationFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:accountAuthProtocol.AuthenticationFailure)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());

    // required .accountAuthProtocol.AuthenticationFailure.FailReason reason = 2 [default = INVALID_CREDENTIALS];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthenticationFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationFailure::GetClassData() const { return &_class_data_; }

void AuthenticationFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthenticationFailure *>(to)->MergeFrom(
      static_cast<const AuthenticationFailure &>(from));
}


void AuthenticationFailure::MergeFrom(const AuthenticationFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:accountAuthProtocol.AuthenticationFailure)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationFailure::CopyFrom(const AuthenticationFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:accountAuthProtocol.AuthenticationFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationFailure::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthenticationFailure::InternalSwap(AuthenticationFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticationFailure, reason_)
      + sizeof(AuthenticationFailure::reason_)
      - PROTOBUF_FIELD_OFFSET(AuthenticationFailure, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationFailure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AuthProtocolMessages_2eproto_getter, &descriptor_table_AuthProtocolMessages_2eproto_once,
      file_level_metadata_AuthProtocolMessages_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace accountAuthProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::accountAuthProtocol::AccountCreation* Arena::CreateMaybeMessage< ::accountAuthProtocol::AccountCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accountAuthProtocol::AccountCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::accountAuthProtocol::AccountCreationSuccess* Arena::CreateMaybeMessage< ::accountAuthProtocol::AccountCreationSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accountAuthProtocol::AccountCreationSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::accountAuthProtocol::AccountCreationFailure* Arena::CreateMaybeMessage< ::accountAuthProtocol::AccountCreationFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accountAuthProtocol::AccountCreationFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::accountAuthProtocol::AuthenticateAccount* Arena::CreateMaybeMessage< ::accountAuthProtocol::AuthenticateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accountAuthProtocol::AuthenticateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::accountAuthProtocol::AuthenticationSuccess* Arena::CreateMaybeMessage< ::accountAuthProtocol::AuthenticationSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accountAuthProtocol::AuthenticationSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::accountAuthProtocol::AuthenticationFailure* Arena::CreateMaybeMessage< ::accountAuthProtocol::AuthenticationFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::accountAuthProtocol::AuthenticationFailure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
